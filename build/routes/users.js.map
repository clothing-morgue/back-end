{"version":3,"sources":["../../src/routes/users.js"],"names":["router","get","req","res","console","log","query","sortField","sortby","User","find","then","users","response","sort","a","b","json","err","status","message","error","id","params","findById","user","post","body","requiredParameter","send","add","put","url","operation"],"mappings":"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","sourcesContent":["import { Router } from \"express\";\r\nimport User from '../data/dbHelper';\r\n\r\nconst router = Router();\r\n\r\n// This get route makes sorting easy\r\n// When you send a get request\r\n// Simply add ?sortby=column_name to the end of the query string\r\n// For example \"http://localhost:3000/users?sortby=last_name\"\r\n// Will return all users sorted by their last names\r\n\r\nrouter.get(\"/\", (req, res) => {\r\n  console.log(req.query);\r\n  const sortField = req.query.sortby || \"id\";\r\n  User.find()\r\n    .then((users) => {\r\n      const response = users.sort((a, b) =>\r\n        a[sortField] < b[sortField] ? -1 : 1\r\n      );\r\n      res.json(response);\r\n    })\r\n    .catch((err) => {\r\n      res.status(500).json({\r\n        message: \"failed to get users\",\r\n        error: err\r\n      });\r\n    });\r\n});\r\n\r\nrouter.get(\"/:id\", (req, res) => {\r\n  const { id } = req.params;\r\n  User.findById(id).then((user) => {\r\n    if (user) {\r\n      res.json(user);\r\n    } else {\r\n      res.status(404).json({ err: \"invalid user id\" });\r\n    }\r\n  });\r\n});\r\n\r\nrouter.post(\"/\", async (req, res) => {\r\n  const user = req.body;\r\n\r\n  for (let requiredParameter of [\"first_name\", \"last_name\", \"email\"]) {\r\n    if (!user[requiredParameter]) {\r\n      return res.status(422).send({\r\n        error: `Expected format: { first_name: <String>, last_name: <String>, email: <String> }. You're missing a \"${requiredParameter}\" property.`\r\n      });\r\n    }\r\n  }\r\n  User.add(user)\r\n    .then((user) => {\r\n      res.status(201).json({ user });\r\n    })\r\n    .catch((error) => {\r\n      res.status(500).json({ error });\r\n    });\r\n});\r\n\r\nrouter.put(\"/:id\", (req, res) => {\r\n  const id = req.params.id;\r\n  res.status(200).json({ url: `/users/${id}`, operation: \"PUT\" });\r\n});\r\n\r\nrouter.delete(\"/:id\", (req, res) => {\r\n  const id = req.params.id;\r\n  res.status(201).json({ url: `/users/${id}`, operation: \"DELETE\" });\r\n});\r\n\r\nexport default router;\r\n"],"file":"users.js"}